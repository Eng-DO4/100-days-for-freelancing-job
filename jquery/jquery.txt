################################################################################################

JQuery is a JS Lib

<script src="prod.min.js"></script>
- for using it
- compressed

"dev.js" file for developing JQuery lib
- for developing it
- uncompressed

################################################################################################

$ --------------> JQuery
() -------------> inside it write the selector
.ready() -------> differ from .onload() as the last waits media loading
this -----------> refers to the element meaned by the selector
var ------------> to declare a variable
                        - better performance (faster as will search one time for the element)
                        - ex: var div = $(".div")

we can use one-line-code format or mutible lines with indentations for the same selector or var
The 2nd choice is prefered if u want to use one-line-comments (//)

for multible funcs on the same selector
        - css() is done first
        - other functions are done ordered and in the desired time

################################################################################################

we start with this ..
    $(document).ready( function(){} )
after appending the 2 script elements (prod , mine) in the HTML file

################################################################################################

.hide(speed, callbackfunc(){})
        displayed -> disappears gradually (opacity decrement) -> display: none; // inline style

.show(speed, callbackfunc(){})
        undisplayed -> appears gradually (opacity increment) -> display: block; // inline style

.toggle(speed, callbackfunc(){})
        works as show or hide depending on the element status

- it's not acually speed it's time in ms but call it speed
- we can use speed only without callbackfunc
- default speed is 400ms
- callbackfunc waits for the event totally happenes then starts and remains on that change

################################################################################################

.css('prop', 'val')
.css({prop: 'val'})
- u can't define a speed/t or a callbackfunc

################################################################################################

.click(func(){})
.dblclick(func(){})

.mouseenter(func(){})
.mouseleave(func(){})
- the element remains on the change done by that func

.hover(func1(){}, func2(){})
- 1st is for mouse enter
- last is for mouse leave
- we can write the first one only
- if we used the 2 funcs the element changes as following:
    normal -> change by func1 -> change by func2 -> remains as func2

################################################################################################

.fadeIn(speed, callbackfunc)
        should be undisplayed -> appears gradually (opacity increment) -> display: block;
.fadeOut(speed, callbackfunc)
        displayed -> disappears gradually (opacity decrement) -> display: none;
.fadeToggle(speed, callbackfunc)

.fadeTo(speed, opacity, callbackfunc)
        should be undisplayed -> appears gradually (opacity increment to disered val)
        or
        should be displayed -> disappears gradually (opacity decrement to disered val)
        depending on the disered val compared with the normal val of opacity

################################################################################################

.slideUp(speed, callbackfunc)
        should be displayed -> appears gradually (height decrement) -> display: none;
.slideDown(speed, callbackfunc)
        should be undisplayed -> appears gradually (height increment) -> display: block;
.slideToggle

################################################################################################

.animate1({
        prop1: 'val1',
        prop2: 'val2',
        ..
}, speed1, callbackfunc2);
.animate2({
        prop1: 'val1',
        prop2: 'val2',
        ..
}, speed2, callbackfunc2);
- CSS properties are in camel case // font-size -> fontSize
- we can use instead of 'val1', 'val2', ..
        - 'hide', 'show', 'toggle'
        - '+=val1', '-=val2' to increase or decrease the predefined val of a num-val-prop
- all properties in an animate function happen together in the desired speed
- if we use more than one animate func all props in animate1 is done first then in animate2
        prop1,prop2.. (animate1) -> callbackfunc1 -> prop1,prop2.. (animate2) -> callbackfunc2

.stop(clearQueue, goToEnd)
- stop is used to prevent animations (t but end val or reaching the end val or both)
- clearQueue and goToEnd are bool var with default values false
- we can use the only a val for the 1st param without writing the last (false as default)
- (false, false)
        - the default values for both
        - stops one animation per event (which is on the queue. past is past)
        - not going to the end val of prop on the canceled animation
- (false, true)
        - stops one animation per event
        - going to the end val of prop on the canceled animation
- (true, false)
        - stops all the animations on the queue
        - not going to end val of prop on any canceled animation
- (true, true)
        - stops all the animations on the queue
        - going to end val of prop on the first canceled animation on the queue

################################################################################################

